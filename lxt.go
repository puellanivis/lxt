package main

import (
	"context"
	"encoding/xml"
	"fmt"
	"io"
	"os"

	"github.com/puellanivis/breton/lib/files"
	_ "github.com/puellanivis/breton/lib/files/plugins"
	_ "github.com/puellanivis/breton/lib/files/s3files"
	_ "github.com/puellanivis/breton/lib/files/sftpfiles"
	flag "github.com/puellanivis/breton/lib/gnuflag"
	"github.com/puellanivis/breton/lib/os/process"

	"github.com/puellanivis/lxt/parser"
	"github.com/puellanivis/lxt/xslt"
)

var (
	Version    = "v0.0.0"
	Buildstamp = "dev"
)

var Flags struct {
	Output string `flag:",short=o" desc:"Specifies which URI to write the output to."`
}

func init() {
	flag.Struct("", &Flags)
}

func getOutput(ctx context.Context, filename string) (io.WriteCloser, error) {
	out, err := files.Create(ctx, filename)
	if err != nil {
		return nil, err
	}

	switch filename {
	case "", "-", "/dev/stdout":
	default:
		if printName := out.Name(); printName != filename {
			fmt.Fprintln(os.Stderr, "input redirected:", printName)
		}
	}

	return out, nil
}

func parseFile(ctx context.Context, filename string, xsl *xslt.Stylesheet) error {
	in, err := files.Open(ctx, filename)
	if err != nil {
		return err
	}
	defer in.Close()

	switch filename {
	case "", "-", "/dev/stdin":
	default:
		if printName := in.Name(); printName != filename {
			fmt.Fprintln(os.Stderr, "input redirected:", printName)
		}
	}

	return parser.ParseFile(ctx, in, in.Name(), xsl)
}

func main() {
	ctx, finish := process.Init("lxt", Version, Buildstamp)
	defer finish()

	filenames := flag.Args()

	if len(filenames) < 1 {
		filenames = append(filenames, "-")
	}

	xsl := xslt.NewStylesheet()

	for _, filename := range filenames {
		if err := parseFile(ctx, filename, xsl); err != nil {
			fmt.Fprintln(os.Stderr, "parseFile:", err)
			process.Exit(1)
		}
	}

	select {
	case <-ctx.Done():
		process.Exit(1)
	default:
	}

	data, err := xml.MarshalIndent(xsl, "", "\t")
	if err != nil {
		fmt.Fprintln(os.Stderr, "xml.MarshalIndent:", err)
		process.Exit(1)
	}

	out, err := getOutput(ctx, Flags.Output)
	if err != nil {
		panic(err)
	}
	defer func(out io.Closer) {
		if err := out.Close(); err != nil {
			fmt.Fprintln(os.Stderr, "output.Close:", err)
			process.Exit(1)
		}
	}(out)

	fmt.Fprint(out, xml.Header)
	fmt.Fprintf(out, "<!-- Generated by %s: do not alter directly -->\n\n", process.Version())

	if _, err := out.Write(data); err != nil {
		fmt.Fprintln(os.Stderr, "out.Write:", err)
		process.Exit(1)
	}

	fmt.Fprintln(out)
}
